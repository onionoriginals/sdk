# DID:WebVH Migration Environment Variables
# Copy to .env and configure for your environment

# ============================================================================
# REQUIRED - Privy Configuration
# ============================================================================
PRIVY_APP_ID=your_privy_app_id_here
PRIVY_APP_SECRET=your_privy_app_secret_here
PRIVY_EMBEDDED_WALLET_POLICY_IDS=

# ============================================================================
# DID Configuration
# ============================================================================
# Domain for DID:WebVH resolution
# Development: localhost:5000
# Production: your.domain.com
DID_DOMAIN=localhost:5000

# ============================================================================
# MIGRATION FEATURE FLAGS
# ============================================================================

# Enable DID:WebVH as primary identifier
# Phase 1-2: false (use did:privy)
# Phase 3+: true (use did:webvh)
AUTH_DID_WEBVH_ENABLED=false

# Accept both did:webvh and did:privy during authentication
# Phase 1-3: true (backward compatibility)
# Phase 4: false (did:webvh only)
AUTH_DID_DUAL_READ_ENABLED=true

# Create both did:webvh and did:privy for new users
# Phase 1-2: true (dual-write mode)
# Phase 3+: false (webvh only)
AUTH_DID_DUAL_WRITE_ENABLED=true

# ============================================================================
# MIGRATION PHASES REFERENCE
# ============================================================================
#
# Phase 1: Dual-Write Start (Day 0)
# AUTH_DID_WEBVH_ENABLED=false
# AUTH_DID_DUAL_READ_ENABLED=true
# AUTH_DID_DUAL_WRITE_ENABLED=true
# → Both DIDs created, did:privy used as primary
#
# Phase 2: Backfill (Day 2-3)
# (Same flags, run backfill job)
# → All existing users get did:webvh
#
# Phase 3: Cutover (Day 7)
# AUTH_DID_WEBVH_ENABLED=true
# AUTH_DID_DUAL_READ_ENABLED=true
# AUTH_DID_DUAL_WRITE_ENABLED=true
# → did:webvh used as primary, both still accepted
#
# Phase 4: Cleanup (Day 30+)
# AUTH_DID_WEBVH_ENABLED=true
# AUTH_DID_DUAL_READ_ENABLED=false
# AUTH_DID_DUAL_WRITE_ENABLED=false
# → Only did:webvh created and accepted
#
# ============================================================================

# ============================================================================
# OPTIONAL - Advanced Configuration
# ============================================================================

# Node environment
NODE_ENV=development

# Server port
PORT=5000

# Database configuration (if using PostgreSQL instead of in-memory)
# DATABASE_URL=postgresql://user:password@localhost:5432/originals

# Redis configuration (for distributed caching)
# REDIS_URL=redis://localhost:6379

# Metrics and monitoring
# METRICS_ENABLED=true
# METRICS_PORT=9090

# Logging level
# LOG_LEVEL=info

# ============================================================================
# CLIENT CONFIGURATION
# ============================================================================

# Vite/React environment variables
VITE_PRIVY_APP_ID=your_privy_app_id_here
VITE_APP_DOMAIN=localhost:5000
VITE_API_URL=http://localhost:5000/api

# ============================================================================
# GOOGLE OAUTH (Optional)
# ============================================================================
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_REDIRECT_URI=http://localhost:5000/api/auth/google/callback

# ============================================================================
# TESTING & DEVELOPMENT
# ============================================================================

# Enable verbose logging for debugging
# DEBUG=true

# Mock Privy in development (bypass actual Privy API)
# MOCK_PRIVY=false

# Test mode (skip certain validations)
# TEST_MODE=false

# ============================================================================
# PRODUCTION CHECKLIST
# ============================================================================
#
# Before deploying to production:
# 
# ✓ Set PRIVY_APP_ID and PRIVY_APP_SECRET
# ✓ Set DID_DOMAIN to your production domain
# ✓ Configure migration flags according to current phase
# ✓ Set up monitoring and alerting
# ✓ Configure database (if using PostgreSQL)
# ✓ Configure Redis (for distributed caching)
# ✓ Set NODE_ENV=production
# ✓ Review security settings
# ✓ Test backfill with --dry-run first
# ✓ Coordinate with downstream services
#
# ============================================================================
